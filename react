import React, { useState, useEffect, useCallback } from 'react';

const GRID_WIDTH = 10;
const GRID_HEIGHT = 20;
const BLOCK_SIZE = 30;

const SHAPES = [
  [[1, 1, 1, 1]],
  [[1, 1], [1, 1]],
  [[1, 1, 1], [0, 1, 0]],
  [[1, 1, 1], [1, 0, 0]],
  [[1, 1, 1], [0, 0, 1]],
  [[1, 1, 0], [0, 1, 1]],
  [[0, 1, 1], [1, 1, 0]]
];

const COLORS = ['cyan', 'yellow', 'purple', 'red', 'green', 'blue', 'orange'];

const LEVEL_SPEED = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100];

const createEmptyGrid = () => 
  Array.from({ length: GRID_HEIGHT }, () => Array(GRID_WIDTH).fill(0));

const randomTetromino = () => {
  const shapeIndex = Math.floor(Math.random() * SHAPES.length);
  return {
    shape: SHAPES[shapeIndex],
    color: COLORS[shapeIndex],
    pos: { x: Math.floor(GRID_WIDTH / 2) - 1, y: 0 }
  };
};

const Tetris = () => {
  const [grid, setGrid] = useState(createEmptyGrid());
  const [tetromino, setTetromino] = useState(randomTetromino());
  const [nextTetromino, setNextTetromino] = useState(randomTetromino());
  const [heldTetromino, setHeldTetromino] = useState(null);
  const [canHold, setCanHold] = useState(true);
  const [gameOver, setGameOver] = useState(false);
  const [score, setScore] = useState(0);
  const [level, setLevel] = useState(1);
  const [lines, setLines] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);

  const moveTetrominoDown = useCallback(() => {
    if (!isColliding(tetromino, { x: 0, y: 1 })) {
      setTetromino(prev => ({ ...prev, pos: { ...prev.pos, y: prev.pos.y + 1 } }));
    } else {
      placeTetromino();
    }
  }, [tetromino]);

  const moveTetrominoHorizontally = (dx) => {
    if (!isColliding(tetromino, { x: dx, y: 0 })) {
      setTetromino(prev => ({ ...prev, pos: { ...prev.pos, x: prev.pos.x + dx } }));
    }
  };

  const rotateTetromino = () => {
    const rotated = {
      ...tetromino,
      shape: tetromino.shape[0].map((_, index) => 
        tetromino.shape.map(row => row[index]).reverse()
      )
    };
    if (!isColliding(rotated, { x: 0, y: 0 })) {
      setTetromino(rotated);
    }
  };

  const holdTetromino = () => {
    if (canHold) {
      if (heldTetromino) {
        const temp = tetromino;
        setTetromino({ ...heldTetromino, pos: { x: Math.floor(GRID_WIDTH / 2) - 1, y: 0 } });
        setHeldTetromino(temp);
      } else {
        setHeldTetromino(tetromino);
        setTetromino(nextTetromino);
        setNextTetromino(randomTetromino());
      }
      setCanHold(false);
    }
  };

  const isColliding = (piece, movement) => {
    for (let y = 0; y < piece.shape.length; y++) {
      for (let x = 0; x < piece.shape[y].length; x++) {
        if (piece.shape[y][x]) {
          const newX = piece.pos.x + x + movement.x;
          const newY = piece.pos.y + y + movement.y;
          if (
            newX < 0 || newX >= GRID_WIDTH ||
            newY >= GRID_HEIGHT ||
            (newY >= 0 && grid[newY][newX])
          ) {
            return true;
          }
        }
      }
    }
    return false;
  };

  const placeTetromino = () => {
    const newGrid = grid.map(row => [...row]);
    tetromino.shape.forEach((row, y) => {
      row.forEach((value, x) => {
        if (value) {
          const newY = y + tetromino.pos.y;
          const newX = x + tetromino.pos.x;
          if (newY >= 0 && newY < GRID_HEIGHT && newX >= 0 && newX < GRID_WIDTH) {
            newGrid[newY][newX] = tetromino.color;
          }
        }
      });
    });
    setGrid(newGrid);
    const clearedLines = clearRows(newGrid);
    updateScore(clearedLines);
    setTetromino(nextTetromino);
    setNextTetromino(randomTetromino());
    setCanHold(true);
    if (isColliding(nextTetromino, { x: 0, y: 0 })) {
      setGameOver(true);
      setIsPlaying(false);
    }
  };

  const clearRows = (newGrid) => {
    const rowsToClear = newGrid.reduce((acc, row, index) => {
      if (row.every(cell => cell !== 0)) {
        acc.push(index);
      }
      return acc;
    }, []);

    if (rowsToClear.length > 0) {
      const clearedGrid = newGrid.filter((_, index) => !rowsToClear.includes(index));
      const newRows = Array.from({ length: rowsToClear.length }, () => Array(GRID_WIDTH).fill(0));
      setGrid([...newRows, ...clearedGrid]);
    }

    return rowsToClear.length;
  };

  const updateScore = (clearedLines) => {
    const linePoints = [40, 100, 300, 1200];
    const points = linePoints[clearedLines - 1] || 0;
    setScore(prev => prev + points * level);
    setLines(prev => {
      const newLines = prev + clearedLines;
      setLevel(Math.floor(newLines / 10) + 1);
      return newLines;
    });
  };

  const startGame = () => {
    setGrid(createEmptyGrid());
    setTetromino(randomTetromino());
    setNextTetromino(randomTetromino());
    setHeldTetromino(null);
    setCanHold(true);
    setGameOver(false);
    setScore(0);
    setLevel(1);
    setLines(0);
    setIsPlaying(true);
  };

  useEffect(() => {
    if (isPlaying && !gameOver) {
      const intervalId = setInterval(moveTetrominoDown, LEVEL_SPEED[level - 1] || LEVEL_SPEED[LEVEL_SPEED.length - 1]);
      return () => clearInterval(intervalId);
    }
  }, [isPlaying, gameOver, level, moveTetrominoDown]);

  useEffect(() => {
    const handleKeyPress = (e) => {
      if (isPlaying && !gameOver) {
        switch(e.key.toLowerCase()) {
          case 'a':
            moveTetrominoHorizontally(-1);
            break;
          case 'd':
            moveTetrominoHorizontally(1);
            break;
          case 's':
            moveTetrominoDown();
            break;
          case 'w':
            rotateTetromino();
            break;
          case ' ':
            holdTetromino();
            break;
          default:
            break;
        }
      }
    };

    window.addEventListener('keydown', handleKeyPress);
    return () => {
      window.removeEventListener('keydown', handleKeyPress);
    };
  }, [isPlaying, gameOver, moveTetrominoDown]);

  const renderMiniGrid = (piece, size) => (
    <div className="border-2 border-gray-400 bg-white p-1">
      {piece.shape.map((row, y) => (
        <div key={y} className="flex">
          {row.map((cell, x) => (
            <div
              key={`${y}-${x}`}
              className={`w-${size} h-${size} border border-gray-200`}
              style={{
                backgroundColor: cell ? piece.color : 'white'
              }}
            />
          ))}
        </div>
      ))}
    </div>
  );

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4">
      <h1 className="text-4xl font-bold mb-4">React Tetris</h1>
      {!isPlaying && !gameOver && (
        <button 
          className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded mb-4"
          onClick={startGame}
        >
          Start Game
        </button>
      )}
      <div className="flex gap-4">
        <div className="flex flex-col items-center">
          <h2 className="text-xl font-semibold mb-2">Hold</h2>
          {heldTetromino ? renderMiniGrid(heldTetromino, 6) : <div className="w-24 h-24 border-2 border-gray-400 bg-white" />}
        </div>
        <div className="border-4 border-gray-800 bg-white">
          {grid.map((row, y) => (
            <div key={y} className="flex">
              {row.map((cell, x) => (
                <div
                  key={`${y}-${x}`}
                  className="w-8 h-8 border border-gray-300"
                  style={{
                    backgroundColor: cell || (
                      isPlaying && tetromino.shape[y - tetromino.pos.y]?.[x - tetromino.pos.x] 
                      ? tetromino.color
                      : 'white'
                    )
                  }}
                />
              ))}
            </div>
          ))}
        </div>
        <div className="flex flex-col items-center">
          <h2 className="text-xl font-semibold mb-2">Next</h2>
          {renderMiniGrid(nextTetromino, 6)}
          <div className="mt-4">
            <p className="font-bold">Score: {score}</p>
            <p className="font-bold">Level: {level}</p>
            <p className="font-bold">Lines: {lines}</p>
          </div>
        </div>
      </div>
      {gameOver && (
        <div className="mt-4 p-4 bg-red-100 border-2 border-red-400 rounded">
          <h2 className="text-2xl font-bold text-red-600 mb-2">Game Over!</h2>
          <p className="mb-2">Final Score: {score}</p>
          <button 
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
            onClick={startGame}
          >
            Restart Game
          </button>
        </div>
      )}
      <div className="mt-4">
        <p>Controls:</p>
        <ul className="list-disc list-inside">
          <li>A/D: Move left/right</li>
          <li>S: Move down faster</li>
          <li>W: Rotate</li>
          <li>Spacebar: Hold piece</li>
        </ul>
      </div>
    </div>
  );
};

export default Tetris;
